{{- $config := fromYaml (include "imagescan.daemon.config" .) -}}
{{- if $config.featureConfig.enabled -}}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "agent.resource.name" $config }}
  namespace: {{ .Release.Namespace }}
  annotations:
    agentVersion: {{ $config.agentConfig.tag }}
  labels:
{{ include "common.labels.with.chart" $config | indent 4 }}
spec:
  selector:
    matchLabels:
{{ include "common.labels" $config | indent 6 }}
{{ include "daemonset.updateStrategy" $config | indent 2}}
  template:
    metadata:
      annotations:
{{ include "common.pod.annotations" $config | indent 8 }}
        # adding it so workload will be restarted to be updated with certificates that were re-generated
        timestamp: {{ now | quote }}
      labels:
{{ include "common.labels" $config | indent 8 }}
    spec:
{{ include "common.pod.properties" $config | indent 6 }}
      containers:
      # Main container
      - name: {{ $config.agentName }}
        image: {{ template "agent.main.image" $config }}
        imagePullPolicy: {{ $config.Values.imagePullPolicy }}
        securityContext:
{{- if contains "openshift" (include "get.platform" $config) }}
          privileged: true
{{- else }}
          runAsUser: 0
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
{{- end }}
        volumeMounts:
        - name: secret-volume
          mountPath: /etc/secret-volume
{{- if eq $config.containerRuntime "docker" }}
        - name: docker-sock-volume
          mountPath: /var/run/docker.sock
          readOnly: true
{{- end }}
        - name: serverkey-volume
          mountPath: /etc/serverkey
        - name: servercert-volume
          mountPath: /etc/servercert
        - name: clientcert-volume
          mountPath: /etc/clientcert
        command: ["/node_agent"]
        ports:
        - containerPort: 8443
{{- if $config.agentConfig.resources }}
        resources:
{{ toYaml $config.agentConfig.resources | indent 10 }}
        {{- end }}
        env: 
{{ include "common.env" $config | indent 8 }}
{{- if or (eq $config.containerRuntime "containerd") (eq $config.containerRuntime "cri-o") }}
        - name: USE_SHIM
          value: "true"
{{- end }}
{{- if or (eq $config.containerRuntime "containerd") (eq $config.containerRuntime "cri-o") }}
      - {{ $containerConfig := merge $config (dict "containerName" "shim") -}} 
        name: {{ $containerConfig.containerName }} 
        image: {{ template "agent.sidecar.image" $containerConfig }}
        imagePullPolicy: {{ $config.Values.imagePullPolicy }}
        securityContext:
{{- if eq $config.containerRuntime "cri-o" }}
          privileged: true
{{- else }}
          runAsUser: 0
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
{{- end }}
        volumeMounts:
        - name: secret-volume
          mountPath: /etc/secret-volume
        - name: cri-sock-volume
          mountPath: /run/cri.sock
          readOnly: true
{{- if eq $config.containerRuntime "containerd" }}
        - name: containerd-sock-volume
          mountPath: /run/containerd/containerd.sock
          readOnly: true
{{- end }}
{{- if eq $config.containerRuntime "cri-o" }}
        - name: etc-containers
          mountPath: /etc/containers
          readOnly: true
        - name: run-containers
          mountPath: /run/containers
          readOnly: false
        - name: var-lib-containers
          mountPath: /var/lib/containers
          readOnly: false
{{- if not (contains "openshift" (include "get.platform" $config)) }}
        - name: lib-x86-64-linux-gnu
          mountPath: /lib/x86_64-linux-gnu
          readOnly: true
        - name: usr-lib-x86-64-linux-gnu
          mountPath: /usr/lib/x86_64-linux-gnu
          readOnly: true
{{- end }}
        - name: lib64
          mountPath: /lib64
          readOnly: true
        - name: podman
          mountPath: /usr/bin/podman
          readOnly: true
        - name: conmon
          mountPath: /usr/bin/conmon
          readOnly: true
        - name: runc
          mountPath: /usr/bin/runc
          readOnly: true
        - name: nsenter
          mountPath: /usr/bin/nsenter
          readOnly: true
{{- end }}
        command: ["/shim"]
{{- include "imagescan.daemon.shim.resources" $config | indent 8 }}
        env:
{{ include "common.env" $config | indent 8 }}
{{- if eq $config.containerRuntime "cri-o" }}
        - name: LD_LIBRARY_PATH
          value: /lib/x86_64-linux-gnu:/lib64:/usr/lib/x86_64-linux-gnu
{{- end }}
{{- if $config.agentConfig.shim.env }}
{{ toYaml $config.agentConfig.shim.env | indent 8 }}
{{- end -}}
{{- end }}
      volumes:
      - name: secret-volume
        secret:
          secretName: {{ .Release.Name }}-cp-cloudguard-creds
{{- if eq $config.containerRuntime "docker" }}
      - name: docker-sock-volume
        hostPath:
{{- if eq (include "get.platform" $config) "tanzu" }}
          path: /var/vcap/sys/run/docker/docker.sock
{{- else }}
          path: /var/run/docker.sock
{{- end }}
          type: Socket
{{- else }}
      - name: cri-sock-volume
        hostPath:
{{- if eq $config.containerRuntime "containerd" }}
          path: {{ include "containerd.sock.path" $config }}
{{- else if eq $config.containerRuntime "cri-o" }}
          path: /run/crio/crio.sock
{{- end }}
          type: Socket
{{- if eq $config.containerRuntime "containerd" }}
      - name: containerd-sock-volume
        hostPath:
          path: {{ include "containerd.sock.path" $config }}
          type: Socket
{{- end }}
{{- if eq $config.containerRuntime "cri-o" }}
      - name: etc-containers
        hostPath:
          path: /etc/containers
          type: Directory
      - name: run-containers
        hostPath:
          path: /run/containers
          type: Directory
      - name: var-lib-containers
        hostPath:
          path: /var/lib/containers
          type: Directory
{{- if not (contains "openshift" (include "get.platform" $config)) }}
      - name: lib-x86-64-linux-gnu
        hostPath:
          path: /lib/x86_64-linux-gnu
          type: Directory
      - name: usr-lib-x86-64-linux-gnu
        hostPath:
          path: /usr/lib/x86_64-linux-gnu
          type: Directory
{{- end }}
      - name: lib64
        hostPath:
          path: /lib64
          type: Directory
      - name: podman
        hostPath:
          path: /usr/bin/podman
          type: File
      - name: conmon
        hostPath:
          path: /usr/bin/conmon
          type: File
      - name: runc
        hostPath:
          path: /usr/bin/runc
          type: File
      - name: nsenter
        hostPath:
          path: /usr/bin/nsenter
          type: File
{{- end }}
{{- end }}
      - name: serverkey-volume
        secret:
          secretName: {{ template "agent.resource.name" $config }}
      - name: servercert-volume
        configMap:
          name: {{ template "agent.resource.name" $config }}
      - name: clientcert-volume
        configMap:
          name: {{ template "imagescan.engineAndList.commonResource.name" . }}
          {{/* TODO: investigate why $config instead of "." fails */}}
{{- end -}}  
