{{- $config := fromYaml (include "admission.enforcer.config" .) -}}
{{- /* Make ".Files" of the chart accessible and properly formatted when accessed via $config' */ -}}
{{- $_ := set $config "Files" .Files -}}
{{ if $config.featureConfig.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "agent.resource.name" $config }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "common.labels.with.chart" $config | indent 4 }}
spec:
  replicas: {{ $config.agentConfig.replicaCount }}
  selector:
    matchLabels:
{{ include "common.labels" $config | indent 6 }}
  template:
    metadata:
      annotations:
{{ include "common.pod.annotations" $config | indent 8 }}
        # adding it so workload will be restarted to be updated with a certificate that was re-generated
        timestamp: {{ now | quote }}
      labels:
{{ include "common.labels" $config | indent 8 }}
    spec:
      # the affinity definition should be BEFORE include "common.pod.properties" .since in case the
      #user will add his own "affinity" we want to take his definition
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "kubernetes.io/name"
                      operator: In
                      values:
                        - {{ include "agent.resource.name" $config }}
                topologyKey: "kubernetes.io/hostname"
{{ include "common.node.affinity.multiarch" $config | indent 8 }}
{{ include "common.pod.properties" $config | indent 6 }}
      containers:
      # Main container
      - name: {{ $config.agentName }}
        image: {{ template "agent.main.image" $config }}
        imagePullPolicy: {{ $config.Values.imagePullPolicy }}
        command: ["/enforcer"]
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
        env:
{{ include "common.env" $config | indent 8 }}
        volumeMounts:
        - name: secret-volume
          mountPath: /etc/secret-volume
        - name: webhook-certs
          mountPath: /etc/certs
          readOnly: true
        {{- if $config.agentConfig.resources }}
        resources:
{{ toYaml $config.agentConfig.resources | indent 10}}
        {{- end }}
        ports:
        - containerPort: 8443
      volumes:
      - name: secret-volume
        secret:
          secretName: {{ template "cg.creds.secret.name" $config }}
      - name: webhook-certs
        secret:
          secretName: {{ template "agent.resource.name" $config }}
{{- end -}}

