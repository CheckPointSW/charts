{{- $config := fromYaml (include "runtime.daemon.config" .) }}
{{- if $config.featureConfig.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "agent.resource.name" $config }}
  namespace: {{ .Release.Namespace }}
  annotations:
    agentVersion: {{ $config.agentConfig.tag }}
  labels:
{{ include "common.labels.with.chart" $config | indent 4 }}
spec:
  selector:
    matchLabels:
{{ include "common.labels" $config | indent 6 }}
  template:
    metadata:
      annotations:
{{ include "common.pod.annotations" $config | indent 8 }}
        container.apparmor.security.beta.kubernetes.io/daemon: unconfined
      labels:
{{ include "common.labels" $config | indent 8 }}
    spec:
{{ include "common.pod.properties" $config | indent 6 }}
      hostNetwork: true  # needed for DNS request listener
      {{- if or $config.featureConfig.enableFileReputation (eq (include "get.platform" $config) "eks.bottlerocket") }}
      hostPID: true
      {{- end }}
      initContainers:
      {{- if and $config.featureConfig.enableFileReputation (eq $config.containerRuntime "cri-o") }}
      # cri-o folder which contains containers root fs is 'private' mount.
      # So nested/sub mounts will not be propagated WS container.
      # The following container changes mount type to 'shared' on host in a hacky way:
      # Literally container escapes its mount's isolation by changing mount namespace
      # to 'init' process namespace, then change type of required mount to 'shared'
      - name: criofsfix
        image: docker.io/library/alpine:3.16  # todo: use cpalpine-based special image
        imagePullPolicy: IfNotPresent
        command: [ "/bin/sh", "-c", "--" ]
        securityContext:
          privileged: true
        args: [ "nsenter --mount=/proc/1/ns/mnt -- mount --make-shared /var/lib/containers/storage/overlay" ]
      {{- end }}
      # probe (sysdig)
      - {{ $containerConfig := merge $config (dict "containerName" "probe") -}}
        name: {{ $containerConfig.containerName }}
        image: {{ template "agent.sidecar.image" $containerConfig }}
        imagePullPolicy: {{ $config.Values.imagePullPolicy }}
        {{- if $config.agentConfig.probe.resources }}
        resources:
{{ toYaml $config.agentConfig.probe.resources | indent 10}}
        {{- end }}
        env:
        {{- if $config.featureConfig.BPF }}
        - name: HOME
          value: "/sysdig"
        - name: SYSDIG_BPF_PROBE
          value: ""
        {{- if $config.featureConfig.autoKernelHeaders }}
        - name: AMAZON_AUTO_KERNEL_HEADERS
          value: "1"
        {{- end }}
        {{- if contains "openshift" (include "get.platform" $config) }}
        - name: SYSDIG_WAIT_FOR_KERNEL_SOURCE_TIMEOUT  # given in seconds
          value: "1800"
        {{- end }}
        {{- end }}
        {{- if .Values.proxy }}
        - name: http_proxy
          value: "{{ .Values.proxy }}"
        {{- end }}
{{ include "common.env" $config | indent 8 }}
        securityContext:
        {{- if eq (include "get.platform" $config) "eks.bottlerocket" }}
          privileged: true
          runAsUser: 0
        {{- else if or (not $config.featureConfig.BPF) (contains "openshift" (include "get.platform" $config)) }}
          privileged: true
        {{- else }}
          runAsUser: 0
        {{- end }}
        volumeMounts:
        - name: boot-vol
          mountPath: /host/boot
          readOnly: true
        - name: modules-vol
          mountPath: /host/lib/modules
          readOnly: true
        - name: usr-vol
          mountPath: /host/usr
          readOnly: true
        - name: host-etc-vol
          mountPath: /host/etc
          readOnly: true
        {{- if $config.featureConfig.BPF }}
        - name: sysdig-probe-vol
          mountPath: /sysdig
        {{- else }}
        - name: host-dev-vol
          mountPath: /host/dev
        {{- end }}
        {{- if $config.featureConfig.autoKernelHeaders }}
        - name: host-root-vol
          mountPath: /host/root
        {{- end }}
      containers:
      # fluentbit
      # the fluentbit container needs to be before the daemon container
      # so the fluentbit will be up before the daemon to send message that daemon will send once it is up (like telemetry)
      - name: fluentbit
        image: {{ template "agent.fluentbit.image" $config }}
        imagePullPolicy: {{ $config.Values.imagePullPolicy }}
        env:
{{ include "fluentbit.env" $config | indent 8 }}
        - name: CP_KUBERNETES_RUNTIME_ALERT_URI
          value: {{ template "cloudguardURL_path" $config }}runtimeevent/alert
        - name: CP_KUBERNETES_RUNTIME_PROFILING_URI
          value: {{ template "cloudguardURL_path" $config }}runtimeevent/profiling
        - name: CP_KUBERNETES_METRIC_URI
          value: {{ template "cloudguardURL_path" $config }}agenttelemetry
        - name: CP_KUBERNETES_RUNTIME_TELEMETRY_URI
          value: {{ template "cloudguardURL_path" $config }}runtimetelemetry
        {{- if $config.agentConfig.fluentbit.resources }}
        resources:
{{ toYaml $config.agentConfig.fluentbit.resources | indent 10}}
        {{- end }}
        volumeMounts:
        - name: rp4c-alerts
          mountPath: /rp4c/alerts
        - name: rp4c-profiling
          mountPath: /rp4c/profiling
        - name: rp4c-metric
          mountPath: /rp4c/metric
        - name: metrics-tail
          mountPath: /metric-tail
        - name: rp4c-telemetry
          mountPath: /rp4c/telemetry
        - name: config-volume-fluentbit
          mountPath: /fluent-bit/etc/fluent-bit.conf
          subPath: fluent-bit.conf
        - name: fluentbit-metric-output
          mountPath: /fluent-bit/etc/metric-output.conf
          subPath: metric-output.conf
        - name: fluentbit-alert-output
          mountPath: /fluent-bit/etc/alert-output.conf
          subPath: alert-output.conf
        - name: fluentbit-profile-output
          mountPath: /fluent-bit/etc/profile-output.conf
          subPath: profile-output.conf
        - name: fluentbit-telemetry-output
          mountPath: /fluent-bit/etc/telemetry-output.conf
          subPath: telemetry-output.conf
      # Main container
      - name: {{ $config.agentName }}
        image: {{ template "agent.main.image" $config }}
        imagePullPolicy: {{ $config.Values.imagePullPolicy }}
        args:
        - run-config
        - -d
        - /etc/checkpoint/cpsba/awl_config_dome9.json
        {{- if $config.agentConfig.resources }}
        resources:
{{ toYaml $config.agentConfig.resources | indent 10 }}
        {{- end }}
        env:
        - name: LANG
          value: C.UTF-8
        - name: SBA_TELEMETRY_SAVE_TO_FILE
          value: "1"
        - name: SBA_CONTAINER_RUNTIME
          value: {{ include "get.container.runtime" . }}
        {{- if $config.featureConfig.BPF }}
        - name: SYSDIG_BPF_PROBE
          value: "/sysdig/.scap/scap-bpf.o"
        {{- end }}
        - name: SBA_USE_NETFILTER_QUEUE
          value: "1"
      {{- if not $config.featureConfig.enableFileReputation }}
        - name: SBA_REQUIRED_BLADES
          value: "SBA,BG"
      {{- end }}
{{ include "common.env" $config | indent 8 }}
        securityContext:
        {{- if or (not $config.featureConfig.BPF) (contains "openshift" (include "get.platform" $config)) }}
          privileged: true
        {{- else }}
          runAsUser: 0
          seLinuxOptions:
            user: system_u
            role: system_r
            type: control_t
            level: s0
          capabilities:
            add:
            - SYS_RESOURCE
            - SYS_ADMIN
            - SYS_NICE
            - SYS_PTRACE
            - FOWNER
            - SYS_PACCT
            - NET_ADMIN
            - NET_RAW
          {{- if $config.featureConfig.enableFileReputation }}
            - AUDIT_CONTROL # for fmon
            - AUDIT_READ # for fmon
            - AUDIT_WRITE # for fmon
          {{- end }}
	    {{- end }}
        volumeMounts:
        - name: rp4c-alerts
          mountPath: /rp4c/alerts
        - name: rp4c-profiling
          mountPath: /rp4c/profiling
        - name: rp4c-metric
          mountPath: /rp4c/metric
        - name: metrics-tail
          mountPath: /metric-tail
        - name: rp4c-telemetry
          mountPath: /rp4c/telemetry
        {{- if eq $config.containerRuntime "docker" }}
        - name: docker-sock
          mountPath: /var/run/docker.sock
          readOnly: true
        {{- if ne (include "get.platform" $config) "tanzu" }}
        - name: varlibdocker-vol
          mountPath: /var/lib/docker
          mountPropagation: HostToContainer
          readOnly: true
        {{- end }}
        {{- end }}
        {{- if eq $config.containerRuntime "containerd" }}
        - name: containerd-sock
          mountPath: /run/containerd/containerd.sock
          readOnly: true
        - mountPath: /run/containerd/io.containerd.runtime.v2.task
          name: runcontainerdfs-vol
          mountPropagation: HostToContainer
          readOnly: true
        {{- end }}
        {{- if eq $config.containerRuntime "cri-o" }}
        - name: crio-sock
          mountPath: /var/run/crio/crio.sock
          readOnly: true
        - name: criofs-vol
          mountPath: /var/lib/containers/storage
          mountPropagation: HostToContainer
          readOnly: true
        - name: criohooks-vol
          mountPath: /etc/containers/oci/hooks.d/
          readOnly: false
        {{- end }}
        - name: host-proc-vol
          mountPath: /host/proc
          readOnly: true
        {{- if $config.featureConfig.BPF }}
        - name: sysdig-probe-vol
          mountPath: /sysdig
          readOnly: true
        {{- else }}
        - name: host-dev-vol
          mountPath: /host/dev
        {{- end }}
        - name: sys-vol
          mountPath: /sys/kernel/debug/
          readOnly: true
        - name: run-xtables-lock
          mountPath: /run/xtables.lock
        - name: crashdumps-vol
          mountPath: /var/log/checkpoint/cpla/crashdumps
      volumes:
      - name: config-volume-fluentbit
        configMap:
            name: {{ template "agent.resource.name" $config }}-fluentbit-metrics
      - name: fluentbit-metric-output
        secret:
          secretName: {{ template "agent.resource.name" $config }}-fluentbit-metrics-output
      - name: fluentbit-alert-output
        secret:
          secretName: {{ template "agent.resource.name" $config }}-fluentbit-alert-output
      - name: fluentbit-profile-output
        secret:
          secretName: {{ template "agent.resource.name" $config }}-fluentbit-profile-output
      - name: fluentbit-telemetry-output
        secret:
          secretName: {{ template "agent.resource.name" $config }}-fluentbit-telemetry-output
      - name: rp4c-alerts
        emptyDir: {}
      - name: rp4c-profiling
        emptyDir: {}
      - name: rp4c-metric
        emptyDir: {}
      - name: metrics-tail
        emptyDir: {}
      - name: rp4c-telemetry
        emptyDir: {}
      {{- if eq $config.containerRuntime "docker" }}
      - name: docker-sock
        hostPath:
      {{- if eq (include "get.platform" $config) "tanzu" }}
          path: /var/vcap/sys/run/docker/docker.sock
          type: Socket
      {{- else }}
          path: /var/run/docker.sock
          type: Socket
      - name: varlibdocker-vol
        hostPath:
          path: /var/lib/docker
      {{- end }}
      {{- end }}
      {{- if eq $config.containerRuntime "containerd" }}
      - name: containerd-sock
        hostPath:
          path: {{ include "containerd.sock.path" $config }}
          type: Socket
      - name: runcontainerdfs-vol
        hostPath:
          path: /run/containerd/io.containerd.runtime.v2.task
      {{- end }}
      {{- if eq $config.containerRuntime "cri-o" }}
      - name: crio-sock
        hostPath:
          path: /var/run/crio/crio.sock
          type: Socket
      - name: criofs-vol
        hostPath:
          path: /var/lib/containers/storage
      - name: criohooks-vol
        hostPath:
          path: /etc/containers/oci/hooks.d/
      {{- end }}
      - name: boot-vol
        hostPath:
          path: /boot
      - name: modules-vol
        hostPath:
          path: /lib/modules
      - name: usr-vol
        hostPath:
          path: /usr
      - name: host-proc-vol
        hostPath:
          path: /proc
      {{- if $config.featureConfig.BPF }}
      - name: sysdig-probe-vol
        hostPath:
          path: /var/local
      {{- else }}
      - name: host-dev-vol
        hostPath:
          path: /dev
      {{- end }}
      - name: sys-vol
        hostPath:
          path: /sys/kernel/debug/
      - name: host-etc-vol
        hostPath:
          path: /etc
      - name: run-xtables-lock
        hostPath:
          path: /run/xtables.lock
      - name: crashdumps-vol
        hostPath:
          path: /tmp/cpla-crashdumps
      {{- if $config.featureConfig.autoKernelHeaders }}
      - name: host-root-vol
        hostPath:
          path: /
      {{- end }}
{{- end }}
